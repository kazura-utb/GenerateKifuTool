
#include "stdafx.h"

#include "cpu.h"

/***************************************************************************
* Name  : KZ_LibInit
* Brief : 初期化処理を行う
* Return: TRUE/FALSE
****************************************************************************/
BOOL KZ_LibInit();
/***************************************************************************
* Name  : KZ_EnumGetCpuMove
* Brief : 着手可能手を列挙する
* Return: 着手可能位置のビット列
****************************************************************************/
UINT64 KZ_GetEnumMove(UINT64 bk_p, UINT64 wh_p, UINT32 *p_count_p);
/***************************************************************************
* Name  : KZ_EnumGetCpuMove
* Brief : 変化する箇所を計算し、ビット列にして返却する
* Return: 変化する箇所のビット列
****************************************************************************/
UINT64 KZ_GetBoardChangeInfo(UINT64 bk, UINT64 wh, INT32 move);

/***************************************************************************
* Name  : KZ_GetCpuMove
* Brief : 定石や評価値からCPUの着手を計算する
* Args  : bk 黒の盤面情報
*         wh 白の盤面情報
*         cpuConfig CPU設定クラス
* Return: 着手可能位置のビット列
****************************************************************************/
UINT64 KZ_GetCpuMove(UINT64 bk, UINT64 wh, CPUCONFIG *cpuConfig);

/***************************************************************************
* Name  : KZ_GetLastEvaluation
* Brief : 直前のCPUの着手に対応する評価値を取得する
* Return: CPUの算出した直近評価値
****************************************************************************/
INT32 KZ_GetLastEvaluation();

/***************************************************************************
* Name  : KZ_GetIsUseBook
* Brief : 直前のCPUの着手が定石手かどうかを取得する
* Return: CPUの算出した直近評価値
****************************************************************************/
BOOL KZ_GetIsUseBook();


/***************************************************************************
* Name  : KZ_GetCountNode
* Brief : 探索済みのノード数を取得する
* Return: CPUが探索したノード数
****************************************************************************/
UINT64 KZ_GetCountNode();

/***************************************************************************
* Name  : KZ_SendAbort
* Brief : AIスレッドに中断命令を送信
* Return: 着手可能位置のビット列
****************************************************************************/
void KZ_SendAbort();

/***************************************************************************
* Name  : KZ_CountBit
* Brief : １が立っているビット数を数える
* Args  : bit １が立っているビットを数える対象のビット列
* Return: １が立っているビット数
****************************************************************************/
UINT32 KZ_CountBit(UINT64 bit);

/***************************************************************************
* Name  : KZ_ReleaseHash
* Brief : ハッシュテーブルを解放する
****************************************************************************/
void KZ_ReleaseHash();
/***************************************************************************
* Name  : KZ_ReleaseBook
* Brief : 定石データを解放する
****************************************************************************/
void KZ_ReleaseBook();